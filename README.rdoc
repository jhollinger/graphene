= Graphene

Graphene is a library for calculating subtotals, percentages, tables and graphs from collections of Ruby objects.
Read the full documentation at http://jordanhollinger.com/docs/graphene/.

Ruby 1.8 is not supported. Stop using it.

== Installation

    $ [sudo] gem install graphene
    # Or just add "graphene" to your Gemfile

Gruff is required only by Graphene's graphing component. Because of this, and because Gruff's dependencies can be difficult to install, 
you will need to install Gruff manually. If you do not/cannot, Graphene's other components will continue to function.

    # On Debian/Ubuntu
    $ sudo apt-get install librmagick-ruby libmagickcore-dev libmagickwand-dev 

    $ [sudo] gem install rmagick gruff
    # Or just add "rmagick" and "gruff" to your Gemfile

See http://nubyonrails.com/pages/gruff/ for more on Gruff.

== Subtotals

    # An array of objects which respond to methods like :browser, :platform, :date
    logs = SomeLogParser.parse('/var/log/nginx/access.log.*')

    subtotals = Graphene.subtotals(logs, :browser)

    puts subtotals.to_a
    => [["Firefox", 120], ["Chrome", 112], ["Internet Explorer", 98]]

    subtotals.each do |browser, count|
      puts "There were #{count} hits from #{browser}"
    end

    # You can also calculate by multiple criteria, and can use lambdas instead of symbols
    subtotals = Graphene.subtotals(logs, ->(l) { l.browser }, :platform)

    puts subtotals.to_a
    => [["Chrome", "OS X", 102], ["Internet Explorer", 98], ["Firefox", "Windows", 90], ["Firefox", "GNU/Linux", 30], ["Chrome", "GNU/Linux", 10]]

See Graphene.subtotals for more info.

== Percentages

    # An array of objects which respond to methods like :browser, :platform, :date
    logs = SomeLogParser.parse('/var/log/nginx/access.log.*')

    percentages = Graphene.percentages(logs, :browser)

    # Includes both the percent and the subtotal
    puts percentages.to_a
    => [["Firefox", 36.36, 120], ["Chrome", 33.93, 112], ["Internet Explorer", 29.69, 98]]

    percentages.each do |browser, percentage, count|
      puts "#{percentage}% of hits where from #{browser}"
    end

    # You can also calculate by multiple criteria, and can use lambdas instead of symbols
    percentages = Graphene.percentages(logs, :browser, ->(l) { l.platform })

See Graphene.percentages for more info.

== Tablizer

Integration with the tablizer gem provides quick ASCII tables.

    puts percentages.tablize
    => +-----------------+------------+-------+-----+
       |     Browser     |  Platform  |Percent|Count|
       +-----------------+------------+-------+-----+
       |Firefox          |Windows     |50.0   |500  |
       |Internet Explorer|Windows     |20.0   |200  |
       |Safari           |OS X        |20.0   |200  |
       |Firefox          |GNU/Linux   |10.0   |100  |
       +-----------------+------------+-------+-----+

== Graphs

Extends Graphene by adding several helpers for generating graphs. Requires that the Ruby "gruff" gem be installed.

    # An array of objects which respond to methods like :browser, :platform, :date
    logs = SomeLogParser.parse('/var/log/nginx/access.log.*')

    # A pie chart of Firefox version shares
    ff = logs.select { |e| e.browser == 'Firefox' }
    Graphene.percentages(ff, :browser).pie_chart('/path/to/ff-version-share.png', 'Firefox Version Share')

    # A line graph of daily browser numbers over time, tricked out with lots of options
    Graphene.subtotals(logs, :browser).line_graph(:date, '/path/to/browser-share.png') do |chart, labeler|
      chart.title = 'Browser Share'
      chart.font = '/path/to/awesome/font.ttf'
      chart.theme = {
        :colors => %w(orange purple green white red),
        :marker_color => 'blue',
        :background_colors => %w(black grey)
      }

      # Only show every 7th label, and make dates pretty
      labeler.call(7) do |date|
        date.strftime('%b %e')
      end
    end

See Graphene::GruffHelpers for more graphs and examples. See http://gruff.rubyforge.org/classes/Gruff/Base.html for more Gruff options.

== License
Copyright 2012 Jordan Hollinger

Licensed under the Apache License
